def iterative_dfs(graph, start, goal):#defines fn named iterative_dfs containing three parameters
#1.Graph: A dictionary representing the graph
#2.Start: The starting node of the search
#3.Goal: The goal node we are trying to reach
  stack = [(start,[start])]# Stack stores tuples of (current_node, path_taken)
  while stack:
    (node,path) = stack.pop()#pop the last node and obtain its corrresponding path
    if node == goal:
      return path

    for neighbour in reversed(graph.get(node,[])):
      #Retrieves the list of neighbors for the current node. If the node has no neighbors (or isn't in the graph), it returns an empty list.
      if neighbour not in path:#Ensures that the neighbor has not already been visited
                               #This check avoids revisiting nodes and creating cycles in the path.
        stack.append((neighbour,path+[neighbour]))
         #If the neighbor hasnâ€™t been visited, it is added to the stack.
         #The path + [neighbor] creates a new list that extends the current path to include the neighbor.
         #This new path is stored alongside the neighbor in the stack.
  return None  # Return None if no path is found
# Example graph
graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['F'],
    'F': []
}
start_node = input("Enter the start node: ")
goal_node = input("Enter the goal node: ")

path = iterative_dfs(graph, start_node, goal_node)

if path:
    print("Path found:", " -> ".join(path))
else:
    print("No path found")



